print(words[2]);
if (nrow(results) == 0) {
print(words[2])
results <- df[df$X2 == words[2], ]
}
results
}
results <- predict3Words["friends"]
predict3Words["friends"]
predict3Words <- function(str) {
str = 'friends'
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
print(words);
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
#   print(words[1]);
#   print(words[2]);
#   if (nrow(results) == 0) {
#     print(words[2])
#     results <- df[df$X2 == words[2], ]
#   }
#   results
}
predict3Words["friends"]
predict3Words <- function(str) {
str = 'friends'
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
#   print(words);
#   if (length(words) == 1) {
#     results <- df[df$X2 == words[1], ];
#   } else {
#     results <- df[df$X1 == words[1] & df$X2 == words[2], ];
#   }
#   print(words[1]);
#   print(words[2]);
#   if (nrow(results) == 0) {
#     print(words[2])
#     results <- df[df$X2 == words[2], ]
#   }
#   results
}
predict3Words["friends"]
View(predict3Words)
predict3Words <- function(str) {
str = 'friends'
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
words
#   print(words);
#   if (length(words) == 1) {
#     results <- df[df$X2 == words[1], ];
#   } else {
#     results <- df[df$X1 == words[1] & df$X2 == words[2], ];
#   }
#   print(words[1]);
#   print(words[2]);
#   if (nrow(results) == 0) {
#     print(words[2])
#     results <- df[df$X2 == words[2], ]
#   }
#   results
}
predict3Words <- function(str) {
str = 'friends'
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
print(words);
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
print(words[1]);
print(words[2]);
if (nrow(results) == 0) {
print(words[2])
results <- df[df$X2 == words[2], ]
}
results
}
predict3Words("friends")
results <- predict3Words("friends")
order(results$count, decreasing = T)
results[order(results$count, decreasing = T), ]
head(results[order(results$count, decreasing = T), ], 3)
predict3Words <- function(str) {
str = 'friends'
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
print(words);
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
if (nrow(results) == 0) {
results <- df[df$X2 == words[2], ]
}
results <- head(results[order(results$count, decreasing = T), ], 3);
}
results <- predict3Words("friends")
results
predict3Words <- function(str) {
str = 'friends'
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
if (nrow(results) == 0) {
results <- df[df$X2 == words[2], ]
}
results <- head(results[order(results$count, decreasing = T), ], 3);
}
results <- predict3Words("friends")
results
results$X3
predict3Words <- function(str) {
str = 'friends'
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
if (nrow(results) == 0) {
results <- df[df$X2 == words[2], ]
}
results # <- head(results[order(results$count, decreasing = T), ], 3);
}
results <- predict3Words("friends")
aggregate(X3~count, results)
aggregate(X3~count, results, sum)
aggregate(count~X3, results, sum)
results <- aggregate(count~X3, results, sum)
head(results[order(results$count, decreasing = T), ], 3)
predict3Words <- function(str) {
str = 'friends'
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
if (nrow(results) == 0) {
results <- df[df$X2 == words[2], ]
}
results <- aggregate(count~X3, results, sum)
top3results <- head(results[order(results$count, decreasing = T), ], 3);
top3results
}
results <- predict3Words("friends")
results
predict3Words("friends")
predict3Words("friendsxyz")
predict3Words <- function(str) {
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
if (nrow(results) == 0) {
results <- df[df$X2 == words[2], ]
}
results <- aggregate(count~X3, results, sum)
top3results <- head(results[order(results$count, decreasing = T), ], 3);
top3results
}
predict3Words("friendsxyz")
predict3Words <- function(str) {
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
if (nrow(results) == 0) {
results <- df[df$X2 == words[2], ]
}
if (nrow(results > 0)) {
results <- aggregate(count~X3, results, sum)
top3results <- head(results[order(results$count, decreasing = T), ], 3);
top3results
}
}
predict3Words("friendsxyz")
predict3Words <- function(str) {
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
if (nrow(results) == 0) {
results <- df[df$X2 == words[2], ]
}
if (nrow(results) > 0) {
results <- aggregate(count~X3, results, sum)
top3results <- head(results[order(results$count, decreasing = T), ], 3);
top3results
}
}
predict3Words("friendsxyz")
predict3Words <- function(str) {
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
if (nrow(results) == 0) {
results <- df[df$X2 == words[2], ]
}
print(results)
if (nrow(results) > 0) {
results <- aggregate(count~X3, results, sum)
top3results <- head(results[order(results$count, decreasing = T), ], 3);
top3results
}
}
predict3Words("friendsxyz")
results <- df[df$X2 == "friendsxyz", ];
str = "friendsxyz"
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
words
words[1]
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
}
predict3Words <- function(str) {
str = "friendsxyz"
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
if (nrow(results) == 0 && length(words) > 1) {
results <- df[df$X2 == words[2], ]
}
print(results)
if (nrow(results) > 0) {
results <- aggregate(count~X3, results, sum)
top3results <- head(results[order(results$count, decreasing = T), ], 3);
top3results
}
}
predict3Words("friendsxyz")
predict3Words <- function(str) {
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
if (nrow(results) == 0 && length(words) > 1) {
results <- df[df$X2 == words[2], ]
}
print(results)
if (nrow(results) > 0) {
results <- aggregate(count~X3, results, sum)
top3results <- head(results[order(results$count, decreasing = T), ], 3);
top3results
}
}
predict3Words("friendsxyz")
predict3Words("friends")
predict3Words <- function(str) {
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
if (nrow(results) == 0 && length(words) > 1) {
results <- df[df$X2 == words[2], ]
}
if (nrow(results) > 0) {
results <- aggregate(count~X3, results, sum)
top3results <- head(results[order(results$count, decreasing = T), ], 3);
top3results
}
}
predict3Words("friends")
results <- predict3Words("friends")
results
c(results$X3)
paste(c(results$X3), sep = ',')
paste(results$X3, sep=',')
results$X2
results$X3
paste(results$X3, collapse=',')
unlist(paste(results$X3, collapse=','))
unlist(paste(results$X3, collapse=', '))
predict3Words <- function(str) {
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
print(words)
if (length(words) == 1) {
results <- df[df$X2 == words[1], ];
} else {
results <- df[df$X1 == words[1] & df$X2 == words[2], ];
}
if (nrow(results) == 0 && length(words) > 1) {
results <- df[df$X2 == words[2], ]
}
if (nrow(results) > 0) {
results <- aggregate(count~X3, results, sum)
top3results <- head(results[order(results$count, decreasing = T), ], 1);
top3results
}
}
predict3Words("what is the result of friends")
predict3Words("family what is the result of friends")
printlastwords <- function(str) {
str <- cleanSentence(str);
words <- unlist(strsplit(str, ' ', fixed = T));
words
}
printlastwords("this is a test sentence")
printlastwords("this is a test sentence for family and friends to enjoy")
printlastwords("this is another test sentence for family and friends to enjoy")
printlastwords("another test sentence for family and friends to enjoy")
printlastwords("another test sentence for family and another friends to enjoy")
printlastwords("another test sentence for family and another this friends to enjoy")
printlastwords("another test sentence for family and another this frien"
)
printlastwords <- function(str) {
str <- cleanSentence(str);
words <- unlist(strsplit(str, ' ', fixed = T));
for (c in 1:length(words))
print(c)
}
printlastwords("another test sentence for family and another this frien"
)
printlastwords("another test sentence for family and another this friends")
printlastwords <- function(str) {
str <- cleanSentence(str);
words <- unlist(strsplit(str, ' ', fixed = T));
for (c in length(words):1) {
print(words[c], words[c-1])
}
}
printlastwords("another test sentence for family and another this friends")
printlastwords <- function(str) {
str <- cleanSentence(str);
words <- unlist(strsplit(str, ' ', fixed = T));
for (c in length(words):2) {
print(words[c], words[c-1])
}
}
printlastwords("another test sentence for family and another this friends")
printlastwords <- function(str) {
str <- cleanSentence(str);
words <- unlist(strsplit(str, ' ', fixed = T));
for (c in length(words):2) {
print(words[c])
}
}
printlastwords("another test sentence for family and another this friends")
printlastwords <- function(str) {
str <- cleanSentence(str);
words <- unlist(strsplit(str, ' ', fixed = T));
for (c in length(words):2) {
print(words[c])
print(words[c-1])
}
}
printlastwords("another test sentence for family and another this friends")
predict_with_2Words <- function(words, idx) {
if (idx > 1)
results <- df[df$X1 == words[idx-1] & df$X2 == words[idx], ]
else
results <- df[df$X2 == words[idx], ];
if (nrow(results) == 0)
results <- df[df$X2 == words[idx], ];
}
predict_with_2Words("another test sentence for family and another this friends", 4)
predict_with_2Words("another test sentence for family and another this friends", 5)
str = "another test sentence for family and another this friends"
words <- unlist(strsplit(str, ' ', fixed = T));
words
predict_with_2Words(words, 5)
predict_with_2Words <- function(words, idx) {
if (idx > 1)
results <- df[df$X1 == words[idx-1] & df$X2 == words[idx], ]
else
results <- df[df$X2 == words[idx], ];
if (nrow(results) == 0)
results <- df[df$X2 == words[idx], ];
results
}
predict_with_2Words(words, 5)
predict_with_2endWords <- function(words, idx) {
if (idx > 1)
results <- df[df$X1 == words[idx-1] & df$X2 == words[idx], ]
else
results <- df[df$X2 == words[idx], ];
if (nrow(results) == 0)
results <- df[df$X2 == words[idx], ];
results
}
predict3Words <- function(str) {
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
print(words)
for (word_idx in length(words):1) {
results <- predict_with_2endWords(words, word_idx)
if (nrow(results) > 0)
break
}
if (nrow(results) > 0) {
results <- aggregate(count~X3, results, sum)
top3results <- head(results[order(results$count, decreasing = T), ], 1);
top3results
}
}
predict_with_2Words(words, 5)
predict3Words(str)
predict_with_2endWords <- function(words, idx) {
if (idx > 1)
results <- df[df$X1 == words[idx-1] & df$X2 == words[idx], ]
else
results <- df[df$X2 == words[idx], ];
if (nrow(results) == 0)
results <- df[df$X2 == words[idx], ];
results
}
predict3Words <- function(str) {
str <- cleanSentence(str)
words <- unlist(strsplit(str, ' ', fixed = T));
for (word_idx in length(words):1) {
results <- predict_with_2endWords(words, word_idx)
if (nrow(results) > 0)
break
}
if (nrow(results) > 0) {
results <- aggregate(count~X3, results, sum)
top3results <- head(results[order(results$count, decreasing = T), ], 1);
top3results
} else {
"cannot predict"
}
}
predict3Words("str")
predict3Words("strength is not a ")
predict3Words("strength is not a d")
predict3Words("strength is not check what is going on")
predict3Words("fffsfdgsgfdg sgd dgdg sdsg df ")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
